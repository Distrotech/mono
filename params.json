{"name":"Mono","tagline":"Mono open source ECMA CLI, C# and .NET implementation.","body":"This is Mono.\r\n\r\n\t1. Installation\r\n\t2. Using Mono\r\n\t3. Directory Roadmap\r\n\t4. git submodules maintenance\r\n\r\n1. Compilation and Installation\r\n===============================\r\n\r\n   a. Build Requirements\r\n   ---------------------\r\n\r\n\tOn Itanium, you must obtain libunwind:\r\n\r\n\t\thttp://www.hpl.hp.com/research/linux/libunwind/download.php4\r\n\r\n\tOn Solaris, make sure that you used GNU tar to unpack this package, as\r\n\tSolaris tar will not unpack this correctly, and you will get strange errors.\r\n\r\n\tOn Solaris, make sure that you use the GNU toolchain to build the software.\r\n\r\n\tOptional dependencies:\r\n\r\n\t\t* libgdiplus\r\n\r\n\t\t  If you want to get support for System.Drawing, you will need to get\r\n\t\t  Libgdiplus.    This library in turn requires glib and pkg-config:\r\n\r\n\t\t\t* pkg-config\r\n\r\n\t\t    \t  Available from: http://www.freedesktop.org/Software/pkgconfig\r\n\r\n\t\t  \t* glib 2.4\r\n\r\n\t\t    \t  Available from: http://www.gtk.org/\r\n\r\n\t\t* libzlib\r\n\r\n\t\t  This library and the development headers are required for compression\r\n\t\t  file support in the 2.0 profile.\r\n\r\n    b. Building the Software\r\n    ------------------------\r\n  \t\r\n\tIf you obtained this package as an officially released tarball,\r\n\tthis is very simple, use configure and make:\r\n\r\n\t\t./configure --prefix=/usr/local\r\n\t\tmake\r\n\t\tmake install\r\n\r\n\tMono supports a JIT engine on x86, SPARC, SPARCv9, S/390,\r\n\tS/390x, AMD64, ARM and PowerPC systems.   \r\n\r\n\tIf you obtained this as a snapshot, you will need an existing\r\n\tMono installation.  To upgrade your installation, unpack both\r\n\tmono and mcs:\r\n\r\n\t\ttar xzf mcs-XXXX.tar.gz\r\n\t\ttar xzf mono-XXXX.tar.gz\r\n\t\tmv mono-XXX mono\r\n\t\tmv mcs-XXX mcs\r\n\t\tcd mono\r\n\t\t./autogen.sh --prefix=/usr/local\r\n\t\tmake\r\n\r\n\tThe Mono build system is silent for most compilation commands.\r\n\tTo enable a more verbose compile (for example, to pinpoint\r\n\tproblems in your makefiles or your system) pass the V=1 flag to make, like this:\r\n\r\n\t\t make V=1\r\n\r\n\r\n    c. Building the software from GIT\r\n    ---------------------------------\r\n\r\n\tIf you are building the software from GIT, make sure that you\r\n\thave up-to-date mcs and mono sources:\r\n\r\n\t   If you are an anonymous user:\r\n\t\tgit clone git://github.com/mono/mono.git\r\n\r\n           If you are a Mono contributors with read/write privileges:\r\n\t        git clone git@github.com:mono/mono.git\r\n\r\n\r\n\tThen, go into the mono directory, and configure:\r\n\r\n\t\tcd mono\r\n\t\t./autogen.sh --prefix=/usr/local\r\n\t\tmake\r\n\r\n\tFor people with non-standard installations of the auto* utils and of\r\n\tpkg-config (common on misconfigured OSX and windows boxes), you could get\r\n\tan error like this:\r\n\r\n\t./configure: line 19176: syntax error near unexpected token `PKG_CHECK_MODULES(BASE_DEPENDENCIES,' ...\r\n\r\n\tThis means that you need to set the ACLOCAL_FLAGS environment var\r\n\twhen invoking autogen.sh, like this:\r\n\r\n\t\tACLOCAL_FLAGS=\"-I $acprefix/share/aclocal\" ./autogen.sh --prefix=/usr/loca\r\n\t\r\n\twhere $acprefix is the prefix where aclocal has been installed.\r\n\r\n\tThis will automatically go into the mcs/ tree and build the\r\n\tbinaries there.\r\n\r\n\tThis assumes that you have a working mono installation, and that\r\n\tthere's a C# compiler named 'mcs', and a corresponding IL\r\n\truntime called 'mono'.  You can use two make variables\r\n\tEXTERNAL_MCS and EXTERNAL_RUNTIME to override these.  e.g., you\r\n\tcan say\r\n\r\n\t  make EXTERNAL_MCS=/foo/bar/mcs EXTERNAL_RUNTIME=/somewhere/else/mono\r\n\t\r\n\tIf you don't have a working Mono installation\r\n\t---------------------------------------------\r\n\r\n\tIf you don't have a working Mono installation, an obvious choice\r\n\tis to install the latest released packages of 'mono' for your\r\n\tdistribution and running autogen.sh; make; make install in the\r\n\tmono module directory.\r\n\r\n\tYou can also try a slightly more risky approach: this may not work,\r\n\tso start from the released tarball as detailed above.\r\n\r\n\tThis works by first getting the latest version of the 'monolite'\r\n\tdistribution, which contains just enough to run the 'mcs'\r\n\tcompiler.  You do this with:\r\n\r\n\t\t# Run the following line after ./autogen.sh\r\n\t\tmake get-monolite-latest\r\n\r\n\tThis will download and automatically gunzip and untar the\r\n\ttarball, and place the files appropriately so that you can then\r\n\tjust run:\r\n\r\n\t\tmake EXTERNAL_MCS=${PWD}/mcs/class/lib/monolite/gmcs.exe\r\n\r\n\tAnd that will use the files downloaded by 'make get-monolite-latest.\r\n\r\n\tTesting and Installation\r\n\t------------------------\r\n\r\n\tYou can run (part of) the mono and mcs testsuites with the command:\r\n\r\n\t\tmake check\r\n\r\n\tAll tests should pass.  \r\n\r\n\tIf you want more extensive tests, including those that test the\r\n\tclass libraries, you need to re-run 'configure' with the\r\n\t'--enable-nunit-tests' flag, and try\r\n\r\n\t\tmake -k check\r\n\r\n\tExpect to find a few testsuite failures.  As a sanity check, you\r\n\tcan compare the failures you got with\r\n\r\n\t\thttps://wrench.mono-project.com/Wrench/\r\n\r\n\tYou can now install mono with:\r\n\r\n\t\tmake install\r\n\r\n\tYou can verify your installation by using the mono-test-install\r\n\tscript, it can diagnose some common problems with Mono's install.\r\n\r\n\tFailure to follow these steps may result in a broken installation. \r\n\r\n    d. Configuration Options\r\n    ------------------------\r\n\r\n\tThe following are the configuration options that someone\r\n\tbuilding Mono might want to use:\r\n\t\r\n\t--with-sgen=yes,no\r\n\r\n\t\tGenerational GC support: Used to enable or disable the\r\n\t\tcompilation of a Mono runtime with the SGen garbage collector.\r\n\r\n\t\tOn platforms that support it, after building Mono, you\r\n\t\twill have both a mono binary and a mono-sgen binary.\r\n\t\tMono uses Boehm, while mono-sgen uses the Simple\r\n\t\tGenerational GC.\r\n\r\n\t--with-gc=[boehm, included, sgen, none]\r\n\r\n\t\tSelects the default Boehm garbage collector engine to\r\n\t  \tuse, the default is the \"included\" value.\r\n\t\r\n\t\tincluded: \r\n\t\t\tThis is the default value, and its\r\n\t  \t\tthe most feature complete, it will allow Mono\r\n\t\t  \tto use typed allocations and support the\r\n\t\t  \tdebugger.\r\n\r\n\t\t\tIt is essentially a slightly modified Boehm GC\r\n\r\n\t\tboehm:\r\n\t\t\tThis is used to use a system-install Boehm GC,\r\n\t\t\tit is useful to test new features available in\r\n\t\t\tBoehm GC, but we do not recommend that people\r\n\t\t\tuse this, as it disables a few features.\r\n\r\n\t\tnone:\r\n\t\t\tDisables the inclusion of a garbage\r\n\t\t  \tcollector.  \r\n\r\n\t--with-tls=__thread,pthread\r\n\r\n\t\tControls how Mono should access thread local storage,\r\n\t  \tpthread forces Mono to use the pthread APIs, while\r\n\t  \t__thread uses compiler-optimized access to it.\r\n\r\n\t  \tAlthough __thread is faster, it requires support from\r\n\t  \tthe compiler, kernel and libc.   Old Linux systems do\r\n\t  \tnot support with __thread.\r\n\r\n\t\tThis value is typically pre-configured and there is no\r\n\t  \tneed to set it, unless you are trying to debug a\r\n\t  \tproblem.\r\n\r\n\t--with-sigaltstack=yes,no\r\n\r\n\t\tExperimental: Use at your own risk, it is known to\r\n\t\tcause problems with garbage collection and is hard to\r\n\t \treproduce those bugs.\r\n\r\n\t\tThis controls whether Mono will install a special\r\n\t  \tsignal handler to handle stack overflows.   If set to\r\n\t  \t\"yes\", it will turn stack overflows into the\r\n\t  \tStackOverflowException.  Otherwise when a stack\r\n\t  \toverflow happens, your program will receive a\r\n\t  \tsegmentation fault.\r\n\r\n\t\tThe configure script will try to detect if your\r\n\t  \toperating system supports this.   Some older Linux\r\n\t  \tsystems do not support this feature, or you might want\r\n\t  \tto override the auto-detection.\r\n\r\n\t--with-static_mono=yes,no\r\n\r\n\t\tThis controls whether `mono' should link against a\r\n\t  \tstatic library (libmono.a) or a shared library\r\n\t  \t(libmono.so). \r\n\r\n\t\tThis defaults to yes, and will improve the performance\r\n\t  \tof the `mono' program. \r\n\r\n\t\tThis only affects the `mono' binary, the shared\r\n\t  \tlibrary libmono.so will always be produced for\r\n\t  \tdevelopers that want to embed the runtime in their\r\n\t  \tapplication.\r\n\r\n\t--with-xen-opt=yes,no\r\n\r\n\t\tThe default value for this is `yes', and it makes Mono\r\n\t  \tgenerate code which might be slightly slower on\r\n\t  \taverage systems, but the resulting executable will run\r\n\t  \tfaster under the Xen virtualization system.\r\n\r\n\t--with-large-heap=yes,no\r\n\r\n\t\tEnable support for GC heaps larger than 3GB.\r\n\r\n\t\tThis value is set to `no' by default.\r\n\r\n\t--enable-small-config=yes,no\r\n\r\n\t\tEnable some tweaks to reduce memory usage and disk footprint at\r\n\t\tthe expense of some capabilities. Typically this means that the\r\n\t\tnumber of threads that can be created is limited (256), that the\r\n\t\tmaxmimum heap size is also reduced (256 MB) and other such limitations\r\n\t\tthat still make mono useful, but more suitable to embedded devices\r\n\t\t(like mobile phones).\r\n\r\n\t\tThis value is set to `no' by default.\r\n\r\n\t--with-ikvm-native=yes,no\r\n\r\n\t\tControls whether the IKVM JNI interface library is\r\n\t  \tbuilt or not.  This is used if you are planning on\r\n\t  \tusing the IKVM Java Virtual machine with Mono.\r\n\r\n\t\tThis defaults to `yes'.\r\n\r\n\t--with-profile4=yes,no\r\n\r\n\t\tWhether you want to build the 4.x profile libraries\r\n\t\tand runtime.\r\n\r\n\t  \tIt defaults to `yes'.\r\n\r\n\t--with-moonlight=yes,no\r\n\r\n\t\tWhether you want to generate the Silverlight/Moonlight\r\n\t\tlibraries and toolchain in addition to the default\r\n\t\t(1.1 and 2.0 APIs).\r\n\r\n\t\tThis will produce the `smcs' compiler which will reference\r\n\t\tthe Silverlight modified assemblies (mscorlib.dll,\r\n\t\tSystem.dll, System.Code.dll and System.Xml.Core.dll) and turn\r\n\t  \ton the LINQ extensions for the compiler.\r\n\r\n\t--with-moon-gc=boehm,sgen\r\n\r\n\t\tSelect the GC to use for Moonlight.\r\n\r\n\t\tboehm:\r\n\t\t\tSelects the Boehm Garbage Collector, with the same flags\r\n\t\t\tas the regular Mono build. This is the default.\r\n\r\n\t\tsgen:\r\n\t\t\tSelects the new SGen Garbage Collector, which provides\r\n\t\t\tGenerational GC support, using the same flags as the\r\n\t\t\tmono-sgen build.\r\n\r\n\t\tThis defaults to `boehm'.\r\n\r\n\t--with-libgdiplus=installed,sibling,<path>\r\n\r\n\t\tThis is used to configure where should Mono look for\r\n\t  \tlibgdiplus when running the System.Drawing tests.\r\n\r\n\t\tIt defaults to `installed', which means that the\r\n\t  \tlibrary is available to Mono through the regular\r\n\t  \tsystem setup.\r\n\r\n\t\t`sibling' can be used to specify that a libgdiplus\r\n\t  \tthat resides as a sibling of this directory (mono)\r\n\t  \tshould be used.\r\n\r\n\t\tOr you can specify a path to a libgdiplus.\r\n\r\n\t--disable-shared-memory \r\n\r\n\t\tUse this option to disable the use of shared memory in\r\n\t\tMono (this is equivalent to setting the MONO_DISABLE_SHM\r\n\t\tenvironment variable, although this removes the feature\r\n\t\tcompletely).\r\n\r\n\t\tDisabling the shared memory support will disable certain\r\n\t\tfeatures like cross-process named mutexes.\r\n\r\n\t--enable-minimal=LIST\r\n\r\n\t\tUse this feature to specify optional runtime\r\n\t  \tcomponents that you might not want to include.  This\r\n\t  \tis only useful for developers embedding Mono that\r\n\t  \trequire a subset of Mono functionality.\r\n\r\n\t\tThe list is a comma-separated list of components that\r\n\t  \tshould be removed, these are:\r\n\r\n\t\taot:\r\n\t\t\tDisables support for the Ahead of Time\r\n\t  \t\tcompilation.\r\n\r\n\t\tattach:\r\n\t\t\tSupport for the Mono.Management assembly and the\r\n\t\t\tVMAttach API (allowing code to be injected into\r\n\t\t\ta target VM)\r\n\r\n\t\tcom:\r\n\t\t\tDisables COM support.\r\n\r\n\t\tdebug:\r\n\t\t\tDrop debugging support.\r\n\r\n\t \tdecimal:\r\n\t\t\tDisables support for System.Decimal.\r\n\r\n\t\tfull_messages:\r\n\t\t\tBy default Mono comes with a full table\r\n\t\t\tof messages for error codes.   This feature\r\n\t\t\tturns off uncommon error messages and reduces\r\n\t\t\tthe runtime size.\r\n\r\n\t\tgenerics:\r\n\t\t\tGenerics support.  Disabling this will not\r\n\t\t\tallow Mono to run any 2.0 libraries or\r\n\t\t\tcode that contains generics.\r\n\r\n\t\tjit:\r\n\t\t\tRemoves the JIT engine from the build, this reduces\r\n\t\t\tthe executable size, and requires that all code\r\n\t\t\texecuted by the virtual machine be compiled with\r\n\t\t\tFull AOT before execution.\r\n\r\n\t\tlarge_code:\r\n\t\t\tDisables support for large assemblies.\r\n\r\n\t\tlogging:\r\n\t  \t\tDisables support for debug logging.\r\n\r\n\t\tpinvoke:\r\n\t\t\tSupport for Platform Invocation services,\r\n\t\t\tdisabling this will drop support for any\r\n\t\t\tlibraries using DllImport.\r\n\r\n\t\tportability:\r\n\t\t\tRemoves support for MONO_IOMAP, the environment\r\n\t\t\tvariables for simplifying porting applications that \r\n\t\t\tare case-insensitive and that mix the Unix and Windows path separators.\r\n\r\n\t\tprofiler:\r\n\t\t\tDisables support for the default profiler.\r\n\r\n\t\treflection_emit:\r\n\t\t\tDrop System.Reflection.Emit support\r\n\r\n\t\treflection_emit_save:\r\n\t\t\tDrop support for saving dynamically created\r\n\t\t\tassemblies (AssemblyBuilderAccess.Save) in\r\n\t\t\tSystem.Reflection.Emit.\r\n\r\n\t\tshadow_copy:\r\n\t\t\tDisables support for AppDomain's shadow copies\r\n\t\t\t(you can disable this if you do not plan on \r\n\t\t\tusing appdomains).\r\n\r\n\t\tsimd:\r\n\t\t\tDisables support for the Mono.SIMD intrinsics\r\n\t\t\tlibrary.\r\n\r\n\t\tssa:\r\n\t\t\tDisables compilation for the SSA optimization\r\n\t\t\tframework, and the various SSA-based\r\n\t\t  \toptimizations.\r\n\r\n\t--enable-llvm\r\n\t--enable-loadedllvm\r\n\r\n\t\tThis enables the use of LLVM as a code generation engine\r\n\t\tfor Mono.  The LLVM code generator and optimizer will be \r\n\t\tused instead of Mono's built-in code generator for both\r\n\t\tJust in Time and Ahead of Time compilations.\r\n\r\n\t\tSee the http://www.mono-project.com/Mono_LLVM for the \r\n\t\tfull details and up-to-date information on this feature.\r\n\r\n\t\tYou will need to have an LLVM built that Mono can link\r\n\t\tagainst,\r\n\r\n\t\tThe --enable-loadedllvm variant will make the llvm backend\r\n\t\tinto a runtime-loadable module instead of linking it directly\r\n\t\tinto the main mono binary.\r\n\r\n\t--enable-big-arrays\r\n\r\n\t\tThis enables the use arrays whose indexes are larger\r\n\t\tthan Int32.MaxValue.   \r\n\r\n\t\tBy default Mono has the same limitation as .NET on\r\n\t\tWin32 and Win64 and limits array indexes to 32-bit\r\n\t\tvalues (even on 64-bit systems).\r\n\r\n\t\tIn certain scenarios where large arrays are required,\r\n\t\tyou can pass this flag and Mono will be built to\r\n\t\tsupport 64-bit arrays.\r\n\r\n\t\tThis is not the default as it breaks the C embedding\r\n\t\tABI that we have exposed through the Mono development\r\n\t\tcycle.\r\n\r\n\t--enable-parallel-mark\r\n\r\n\t\tUse this option to enable the garbage collector to use\r\n\t\tmultiple CPUs to do its work.  This helps performance\r\n\t\ton multi-CPU machines as the work is divided across CPUS.\r\n\r\n\t\tThis option is not currently the default as we have\r\n\t\tnot done much testing with Mono.\r\n\r\n\t--enable-dtrace\r\n\r\n\t\tOn Solaris and MacOS X builds a version of the Mono\r\n\t\truntime that contains DTrace probes and can\r\n\t\tparticipate in the system profiling using DTrace.\r\n\r\n\r\n\t--disable-dev-random\r\n\r\n\t\tMono uses /dev/random to obtain good random data for\r\n\t  \tany source that requires random numbers.   If your\r\n\t  \tsystem does not support this, you might want to\r\n\t  \tdisable it.\r\n\r\n\t\tThere are a number of runtime options to control this\r\n\t  \talso, see the man page.\r\n\r\n\t--enable-nacl\r\n\r\n\t\tThis configures the Mono compiler to generate code\r\n\t\tsuitable to be used by Google's Native Client:\r\n\r\n\t\t\t http://code.google.com/p/nativeclient/\r\n\r\n\t\tCurrently this is used with Mono's AOT engine as\r\n\t\tNative Client does not support JIT engines yet.\r\n\r\n2. Using Mono\r\n=============\r\n\r\n\tOnce you have installed the software, you can run a few programs:\r\n\r\n\t* runtime engine\r\n\r\n\t\tmono program.exe\r\n\r\n\t* C# compiler\r\n\r\n\t\tmcs program.cs\r\n\r\n\t* CIL Disassembler\r\n\r\n\t\tmonodis program.exe\r\n\r\n\tSee the man pages for mono(1), mint(1), monodis(1) and mcs(2)\r\n\tfor further details.\r\n\r\n3. Directory Roadmap\r\n====================\r\n\r\n\tdocs/\r\n\t\tTechnical documents about the Mono runtime.\r\n\r\n\tdata/\r\n\t\tConfiguration files installed as part of the Mono runtime.\r\n\r\n\tmono/\r\n\t\tThe core of the Mono Runtime.\r\n\r\n\t\tmetadata/\r\n\t\t\tThe object system and metadata reader.\r\n\r\n\t\tmini/\r\n\t\t\tThe Just in Time Compiler.\r\n\r\n\t\tdis/\r\n\t\t\tCIL executable Disassembler\r\n\r\n\t\tcli/\r\n\t\t\tCommon code for the JIT and the interpreter.\r\n\r\n\t\tio-layer/\r\n\t\t\tThe I/O layer and system abstraction for \r\n\t\t\temulating the .NET IO model.\r\n\r\n\t\tcil/\r\n\t\t\tCommon Intermediate Representation, XML\r\n\t\t\tdefinition of the CIL bytecodes.\r\n\r\n\t\tinterp/\r\n\t\t\tInterpreter for CLI executables (obsolete).\r\n\r\n\t\tarch/\r\n\t\t\tArchitecture specific portions.\r\n\r\n\tman/\r\n\r\n\t\tManual pages for the various Mono commands and programs.\r\n\r\n\tsamples/\r\n\r\n\t\tSome simple sample programs on uses of the Mono\r\n\t\truntime as an embedded library.   \r\n\r\n\tscripts/\r\n\r\n\t\tScripts used to invoke Mono and the corresponding program.\r\n\r\n\truntime/\r\n\r\n\t\tA directory that contains the Makefiles that link the\r\n\t\tmono/ and mcs/ build systems.\r\n\r\n\t../olive/\r\n\r\n\t\tIf the directory ../olive is present (as an\r\n\t\tindependent checkout) from the Mono module, that\r\n\t\tdirectory is automatically configured to share the\r\n\t\tsame prefix than this module gets.\r\n\r\n\r\n4. Git submodules maintenance\r\n=============================\r\n\r\nRead documentation at http://mono-project.com/Git_Submodule_Maintenance\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}